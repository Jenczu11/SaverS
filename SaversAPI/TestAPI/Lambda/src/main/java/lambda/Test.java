package lambda;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore;

import java.util.ArrayList;
import java.util.List;

@DynamoDBTable(tableName = "tests")
public class Test {
    private String id;
    private String recruiter;
    private String name;
    private String lang;
    private List<Question> questions;
    @DynamoDBIgnore
    private  ArrayList<String> message;

    public Test() {
        message = new ArrayList<>();
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "recruiter")
    public String getRecruiter() {
        return recruiter;
    }

    public void setRecruiter(String recruiter) {
        this.recruiter = recruiter;
    }

    @DynamoDBAttribute(attributeName = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "lang")
    public String getLang() {
        return lang;
    }

    public void setLang(String lang) {
        this.lang = lang;
    }

    @DynamoDBAttribute(attributeName = "questions")
    public List<Question>  getQuestions() {
        return questions;
    }

    public void setQuestions(List<Question>  questions) {
        this.questions = questions;
    }

    @DynamoDBIgnore
    public boolean isTestCorrect(){
        if(this.name.equals("")) message.add("Empty test name");

        if(this.recruiter.equals("")) message.add("Empty owner name");

        checkLang();

        if (this.questions.size() == 0) message.add("Empty questions");

        for (int i = 0; i < this.questions.size(); i++) {
            if(!questions.get(i).checkQuestion(i+1)) message.addAll(questions.get(i).getErrors());
        }

        if (message.size() == 0) {
            message.add("Test is correct");
            return true;
        } else {
            message.add(0,"Test is incorrect");
            return false;
        }

    }

    private void checkLang(){
        ArrayList<String> availableLang = new ArrayList<String>();
        availableLang.add("PL");
        availableLang.add("pl");
        availableLang.add("EN");
        availableLang.add("en");
        if (!availableLang.contains(this.lang)) message.add("Invalid lang");
    }

    public String exportToCSV() {
        String output = "data:text/csv;charset=utf-8,";
        for (Question question : questions) {
            output+="\"" + question.exportToCSV(this.lang)+"\"\n";
        }
        return output;
    }
}
