package lambda;

import com.amazonaws.services.dynamodbv2.datamodeling.*;

import java.util.ArrayList;

@DynamoDBTable(tableName = "answers")
public class Answer {
    private String id;
    private Test test;
    private String candidate;
    private String recruiter;
    private Integer points;
    private ArrayList<String> answers;
    private ArrayList<Boolean> correctness;
    @DynamoDBIgnore
    private ArrayList<String> message;
    @DynamoDBIgnore
    private transient int userType;

    public Answer() {
        message = new ArrayList<>();
        answers = new ArrayList<>();
        points = -1;
    }

    @DynamoDBHashKey(attributeName = "id")
    //@DynamoDBAutoGeneratedKey
    public String getId() {
        if(this.candidate != null && this.test != null && this.test.getId() != "")
            return this.candidate + '-' + this.test.getId();
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBTyped(DynamoDBMapperFieldModel.DynamoDBAttributeType.M)
    @DynamoDBAttribute(attributeName = "test")
    public Test getTest() {
        return test;
    }

    public void setTest(Test test) {
        this.test = test;
    }


    @DynamoDBAttribute(attributeName = "candidate")
    public String getCandidate() {
        return candidate;
    }

    public void setCandidate(String candidate) {
        this.candidate = candidate;
    }

    @DynamoDBAttribute(attributeName = "recruiter")
    public String getRecruiter() {
        return recruiter;
    }

    public void setRecruiter(String recruiter) {
        this.recruiter = recruiter;
    }

    @DynamoDBAttribute(attributeName = "points")
    public Integer getPoints() {
        return points;
    }

    public void setPoints(Integer points) {
        this.points = points;
    }

    @DynamoDBAttribute(attributeName = "answers")
    public ArrayList<String> getAnswers() {
        return answers;
    }

    public void setAnswers(ArrayList<String> answers) {
        this.answers = answers;
    }

    @DynamoDBAttribute(attributeName = "correctness")
    public ArrayList<Boolean> getCorrectness() {
        return correctness;
    }

    public void setCorrectness(ArrayList<Boolean> correctness) {
        this.correctness = correctness;
    }

    @DynamoDBIgnore
    boolean isSolutionCorrect(){
        if(this.candidate.equals("")) message.add("Empty candidate");
        if(this.test == null) message.add("Empty test");
        if(!this.test.isTestCorrect()) message.add("Invalid test");
        if(this.recruiter.equals("")) message.add("Empty recruiter");
        if(this.test.getQuestions().size() != this.getAnswers().size()) message.add("Invalid number of answers");

        for (Question question : this.getTest().getQuestions()) {
            switch (question.getType()) {
                case "O": {
                    if (this.answers.get(question.getId()-1).equals("")) message.add("A"+question.getId()+" Empty answer");
                    break;
                }
                case "W": {
                    String[] splitAnswers = this.answers.get(question.getId()-1).split(";");
                    for (String splitAnswer : splitAnswers) {
                        if(!question.getAnswers().contains(splitAnswer)) message.add("A"+question.getId()+" Forbidden answer: "+splitAnswer);
                    }
                    break;
                }
                case "L": {
                    try {
                        Double.parseDouble(this.answers.get(question.getId()-1));
                    } catch (NumberFormatException e) {
                        message.add("A"+question.getId()+" Non-number answer");
                    }
                    break;
                }
                default:
                    message.add("A"+question.getId()+" invalid question type");
            }
        }
        if (message.size() == 0) {
            message.add("Data is correct");
            return true;
        } else {
            message.add(0,"Data is incorrect");
            return false;
        }
    }

    @DynamoDBIgnore
    boolean isEvaluationCorrect(){
        this.isSolutionCorrect();
        this.message.remove(0);
        if(this.points < 0 ) message.add("Invalid number of points");
        if(this.getCorrectness().size() != this.getAnswers().size()) message.add("Invalid number of correctness");

        if (message.size() == 0) {
            message.add("Data is correct");
            return true;
        } else {
            message.add(0,"Data is incorrect");
            return false;
        }
    }

    @DynamoDBIgnore
    public int getUserType() {
        return userType;
    }

    @DynamoDBIgnore
    public void setUserType(int userType) {
        this.userType = userType;
    }
}
